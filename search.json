[{"title":"实现对象属性值监听","url":"/yuque-post/gists/watch/","content":"\n```javascript\nfunction watch(obj, key, onchange){\n  Object.defineProperty(obj, key, {\n    get: function(){\n      return data;\n    },\n    set: function(newValue){\n      data = newValue;\n      if (typeof onchange === 'function') {\n        onchange(newValue);\n      }\n    }\n  })\n}\n\nvar obj = {};\nwatch(obj,'sheet',function(val){\n  console.log(val);\n});\n\nobj.sheet = {a:'b'};\n\nsetTimeout(() => {\n  obj.sheet = {a:'c'};\n}, 1000);\n```\n\n\n\n"},{"title":"call,apply,bind的区别","url":"/yuque-post/gists/zqogcg/","content":"\n```\nfoo.call(this, arg1,arg2,arg3) == foo.apply(this, arguments)==this.foo(arg1, arg2, arg3)\n```\n\n\n"},{"title":"移除chrome自动填写时的背景色","url":"/yuque-post/gists/remove-chrome-input/","content":"chrome 的自动填写会导致输入框的背景颜色变化，不符合设计稿，可修复如下：\n\n```css\n/* 移除浏览器自动填写导致的输入框背景色 */\ninput:-webkit-autofill,\ntextarea:-webkit-autofill,\nselect:-webkit-autofill,\ninput:-webkit-autofill:focus,\ntextarea:-webkit-autofill:focus,\nselect:-webkit-autofill:focus {\n  box-shadow: 0 0 0 1000px white inset;\n  -webkit-box-shadow: 0 0 0 1000px white inset;\n}\n```\n\n\n\n"},{"title":"数组处理","url":"/yuque-post/gists/array/","content":"<a name=\"381c019a\"></a>\n## **判断两个数组的包含关系，判断a是否包含b**\n```javascript\n/*\n * 判断两个数组的包含关系，判断a是否包含b\n * 期望输入： a=[1,2,3,5], b=[2,3]\n * 期望输出：布尔值Boolean\n*/\n\nconst compareArr = (a,b) => {\n    if (b.length > a.length) {\n        return false\n    }\n    return b.every(i => a.includes(i))\n}\n```\n\n\n<a name=\"da646e65\"></a>\n## 剔除数组中重复的元素\n\n```javascript\n/*\nEs6 快速去重\n*/\nfunction removeDupli(array){\n\treturn Array.from(new Set(array))\n}\n```\n\n```javascript\n/*\n    期望输入：[1,2,2,3,8,7,65,2]\n    期望输出：[1,2,3,8,7,65]\n*/\n\nvar str = [1,2,2,3,8,7,65,2];\nvar res = [];\nstr.forEach(s => {\n    if (!res.includes(s)) {\n        res.push(s)\n    }\n})\n\nconsole.log(res)\n```\n\n\n<a name=\"3f0364ce\"></a>\n## 从JSON或数组中提取数组\n```javascript\n/*\n    期望输入： 数组数据或json字符串(不确定是哪一个)\n    输出： 数组格式的数据\n*/\nconst pickArray = x => {\n    /* 从json或数组中提取数组，用于对象类型未知的情况 */\n    let res = []\n    if (Array.isArray(x)) {\n        res = x\n    } else if ((/\\[\\{/).test(x)) {\n        res = JSON.parse(x)\n    }\n    return res\n}\n```\n\n\n"},{"title":"数字格式化","url":"/yuque-post/gists/number/","content":"<a name=\"dc6609d8\"></a>\n## **将输入格式化为带2位小数**\n```javascript\n/*\n    期望输入： 123.321等任意数字串\n    期望输出：123.45带两位小数的浮点数或整数\n*/\n\nfixVal(e) {\n    let v = e.trim();\n    v = v && v.match(/\\d+(\\.\\d+)?/)[0]\n    const n = (!v || isNaN(v) || v==0) ? 0 : Math.abs(parseFloat(v).toFixed(2));\n    return n\n}\n```\n\n\n"},{"title":"日期格式化","url":"/yuque-post/gists/date/","content":"<a name=\"606aca26\"></a>\n## 时间格式化\n```javascript\nconst timeFormat = (stamp, format='yyyy-MM-dd') => {\n    /* 时间格式化 */\n    let d = new Date(stamp);\n    let year = d.getFullYear(),\n        month = d.getMonth()+1,\n        date = d.getDate(),\n        hour = d.getHours(),\n        min = d.getMinutes(),\n        sec = d.getSeconds();\n    let output = '';\n    switch (format) {\n        case 'yyyy-MM-dd':\n            output = [year,month,date].join('-');\n            break;\n        default:\n            output = [year,month,date].join('-')+' '+[hour,min].join(':');\n            break;\n    }\n    return output;\n}\n```\n\n<a name=\"a7bfb8a8\"></a>\n## **将零时区转化为当地时间**\n```javascript\n/* 依赖时间格式化函数 */\n\nconst zeroToLocal = (stamp, format='yyyy-MM-dd') => {\n    /* 将传入的零时区的时间转化为当地时间显示 */\n    /*\n     * 参数：\n     * offset: 当前时区时间差 = 零时区时间-当地时间 单位：min\n     *       eg: 中国时区+0800 时间差为-480(min),-480/60 = -8小时\n     * localtime: 转换后输出的当地时间\n    */\n    if (!stamp) return;\n    let d = new Date(stamp);\n    if (!d) return stamp;\n    let offset = new Date().getTimezoneOffset();\n    let localtime = d.getTime() - offset*60*1000;\n    let output = timeFormat(localtime,format);\n    return output;\n}\n```\n\n<a name=\"38c57d19\"></a>\n## **将当地时间转化为零时区时间**\n```javascript\nconst localToZero = (stamp, format='yyyy-MM-dd') => {\n    /* 将当地时间转化为零时区时间 */\n    /*\n     * 参数：\n     * offset: 当前时区时间差 = 零时区时间-当地时间 单位：min\n     *       eg: 中国时区+0800 时间差为-480(min),-480/60 = -8小时\n     * zeroTime: 转换后输出的当地时间\n    */\n    if (!stamp) return;\n    let d = new Date(stamp).toJSON().substr(0, 19);\n    let [date,time] = d.split('T');\n    let [year,month,day] = date.split('-');\n    let [hour,min,sec] = time.split(':');\n    let output = '';\n    switch (format) {\n        case 'yyyy-MM-dd':\n            output = [year,month,date].join('-');\n            break;\n        default:\n            output = [year,month,date].join('-')+' '+[hour,min].join(':');\n            break;\n    }\n    return output;\n}\n```\n\n\n"},{"title":"英文格式化","url":"/yuque-post/gists/char/","content":"<a name=\"24ef528e\"></a>\n## 首字母大写\n\n```javascript\nconst hump = char => {\n    /* 首字母大写 */\n    if (!char) return;\n    if (!(/^\\w+$/).test(char)) return char;\n    char = char.toLowerCase();\n    let cs = char.split('');\n    cs[0] = cs[0].toString().toUpperCase();\n    return cs.join('');\n}\n```\n\n<a name=\"e0e1b542\"></a>\n## 将下划线格式改为驼峰格式\n```javascript\nconst toHump = char => {\n    /* 将下划线格式改为驼峰格式 */\n    /* eg: Demang_ddd => Demang Ddd */\n    if (!char) return;\n    if (!(/^\\w+_\\w+$/).test(char)) return char;\n    let cs = [];\n    const chars = char.split('_');\n    chars.forEach(item => {\n        cs.push(hump(item))\n    })\n    return cs.join(' ');\n}\n```\n\n\n"}]